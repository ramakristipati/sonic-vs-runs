============================= test session starts ==============================
platform linux -- Python 3.8.10, pytest-6.2.5, py-1.11.0, pluggy-1.3.0 -- /usr/bin/python3.8
cachedir: .pytest_cache
rootdir: /repo/tests, configfile: ../spytest/pytest.ini
plugins: forked-1.6.0, timeout-2.2.0, xdist-2.5.1.dev21+gc43a2d9
gw0 I / gw1 I / gw2 I / gw3 I / gw4 I / gw5 I / gw6 I / gw7 I
[gw0] linux Python 3.8.10 cwd: /repo/tests
[gw1] linux Python 3.8.10 cwd: /repo/tests
[gw2] linux Python 3.8.10 cwd: /repo/tests
[gw3] linux Python 3.8.10 cwd: /repo/tests
[gw4] linux Python 3.8.10 cwd: /repo/tests
[gw5] linux Python 3.8.10 cwd: /repo/tests
[gw6] linux Python 3.8.10 cwd: /repo/tests
[gw7] linux Python 3.8.10 cwd: /repo/tests
[gw0] Python 3.8.10 (default, Nov 22 2023, 10:22:35)  -- [GCC 9.4.0]
[gw1] Python 3.8.10 (default, Nov 22 2023, 10:22:35)  -- [GCC 9.4.0]
[gw2] Python 3.8.10 (default, Nov 22 2023, 10:22:35)  -- [GCC 9.4.0]
[gw3] Python 3.8.10 (default, Nov 22 2023, 10:22:35)  -- [GCC 9.4.0]
[gw4] Python 3.8.10 (default, Nov 22 2023, 10:22:35)  -- [GCC 9.4.0]
[gw6] Python 3.8.10 (default, Nov 22 2023, 10:22:35)  -- [GCC 9.4.0]
[gw5] Python 3.8.10 (default, Nov 22 2023, 10:22:35)  -- [GCC 9.4.0]
[gw7] Python 3.8.10 (default, Nov 22 2023, 10:22:35)  -- [GCC 9.4.0]

batch/test_spytest_infra_1.py::test_spytest_infra_first 
[gw3] PASSED batch/test_spytest_infra_1.py::test_spytest_infra_first 
batch/test_spytest_infra_1.py::test_spytest_infra_second 
[gw2] PASSED batch/test_spytest_infra_1.py::test_spytest_infra_first 
batch/test_spytest_infra_1.py::test_spytest_infra_second 
[gw3] PASSED batch/test_spytest_infra_1.py::test_spytest_infra_second 
[gw2] PASSED batch/test_spytest_infra_1.py::test_spytest_infra_second 
switching/test_vlan.py::test_ft_add_unknownvlan_interface 
switching/test_portchannel.py::test_ft_portchannel_with_vlan_variations 
[gw3] PASSED switching/test_vlan.py::test_ft_add_unknownvlan_interface 
switching/test_vlan.py::test_ft_vlan_delete_with_member 
[gw3] PASSED switching/test_vlan.py::test_ft_vlan_delete_with_member 
switching/test_vlan.py::test_ft_vlan_trunk_tagged 
[gw2] PASSED switching/test_portchannel.py::test_ft_portchannel_with_vlan_variations 
switching/test_portchannel.py::test_ft_verify_min_links_functionality_by_flapping_all_member_ports_007 
[gw2] PASSED switching/test_portchannel.py::test_ft_verify_min_links_functionality_by_flapping_all_member_ports_007 
[gw3] PASSED switching/test_vlan.py::test_ft_vlan_trunk_tagged 
switching/test_vlan.py::test_ft_vlan_save_config_warm_and_fast_reboot 
batch/test_spytest_infra_1.py::test_spytest_infra_last 
[gw2] PASSED batch/test_spytest_infra_1.py::test_spytest_infra_last 
system/test_lldp.py::test_ft_lldp_LocManAddrLen 
[gw2] XFAIL system/test_lldp.py::test_ft_lldp_LocManAddrLen 
system/test_lldp.py::test_ft_lldp_LocManAddrlfld 
[gw2] XFAIL system/test_lldp.py::test_ft_lldp_LocManAddrlfld 
system/test_lldp.py::test_ft_lldp_LocManAddrEntry 
[gw2] XFAIL system/test_lldp.py::test_ft_lldp_LocManAddrEntry 
system/test_lldp.py::test_ft_lldp_ConfigManAddrEntry 
[gw2] XFAIL system/test_lldp.py::test_ft_lldp_ConfigManAddrEntry 
system/test_lldp.py::test_ft_lldp_lldplocportid 
[gw2] XFAIL system/test_lldp.py::test_ft_lldp_lldplocportid 
system/test_lldp.py::test_ft_lldp_lldplocsysname 
[gw2] XFAIL system/test_lldp.py::test_ft_lldp_lldplocsysname 
system/test_lldp.py::test_ft_lldp_lldplocsysdesc 
[gw2] XFAIL system/test_lldp.py::test_ft_lldp_lldplocsysdesc 
system/test_lldp.py::test_ft_lldp_rem_man_addr_table 
[gw2] XFAIL system/test_lldp.py::test_ft_lldp_rem_man_addr_table 
system/test_lldp.py::test_ft_lldp_non_default_config 
[gw2] XFAIL system/test_lldp.py::test_ft_lldp_non_default_config 
system/test_lldp.py::test_ft_lldp_docker_restart 
[gw2] XFAIL system/test_lldp.py::test_ft_lldp_docker_restart 
system/test_lldp.py::test_lldp_verify_counters 
[gw2] XFAIL system/test_lldp.py::test_lldp_verify_counters 
system/test_lldp.py::test_ft_lldp_with_remote_server 
[gw2] XFAIL system/test_lldp.py::test_ft_lldp_with_remote_server 
batch/test_spytest_infra_1.py::test_spytest_infra_last 
[gw2] PASSED batch/test_spytest_infra_1.py::test_spytest_infra_last 
system/test_interface.py::test_ft_port_fn_verify_shut_noshut 
[gw3] FAILED switching/test_vlan.py::test_ft_vlan_save_config_warm_and_fast_reboot 
batch/test_spytest_infra_1.py::test_spytest_infra_last 
[gw2] XFAIL system/test_interface.py::test_ft_port_fn_verify_shut_noshut 
batch/test_spytest_infra_1.py::test_spytest_infra_last 
[gw3] PASSED batch/test_spytest_infra_1.py::test_spytest_infra_last 
system/test_ssh.py::test_ft_ssh_service_disable 
[gw2] PASSED batch/test_spytest_infra_1.py::test_spytest_infra_last 
batch/test_spytest_infra_1.py::test_spytest_infra_first 
[gw3] PASSED system/test_ssh.py::test_ft_ssh_service_disable 
system/test_ssh.py::test_ft_ssh_add_user_verify 
[gw4] PASSED batch/test_spytest_infra_1.py::test_spytest_infra_first 
batch/test_spytest_infra_1.py::test_spytest_infra_second 
[gw5] PASSED batch/test_spytest_infra_1.py::test_spytest_infra_first 
batch/test_spytest_infra_1.py::test_spytest_infra_second 
[gw4] PASSED batch/test_spytest_infra_1.py::test_spytest_infra_second 
[gw5] PASSED batch/test_spytest_infra_1.py::test_spytest_infra_second 
system/test_snapshot.py::test_ft_watermark_telemetry_interval 
system/test_snmp.py::test_ft_snmp_sysName 
[gw4] PASSED system/test_snapshot.py::test_ft_watermark_telemetry_interval 
[gw5] XFAIL system/test_snmp.py::test_ft_snmp_sysName 
system/test_snmp.py::test_ft_snmp_test_syUpTime 
[gw5] PASSED system/test_snmp.py::test_ft_snmp_test_syUpTime 
system/test_snmp.py::test_ft_snmp_sysDescr 
[gw5] PASSED system/test_snmp.py::test_ft_snmp_sysDescr 
system/test_snmp.py::test_ft_snmp_mib_2 
batch/test_spytest_infra_1.py::test_spytest_infra_last 
[gw5] PASSED system/test_snmp.py::test_ft_snmp_mib_2 
system/test_snmp.py::test_ft_snmp_if_mib_all 
[gw5] PASSED system/test_snmp.py::test_ft_snmp_if_mib_all 
system/test_snmp.py::test_ft_snmp_entity_mib_all 
[gw5] PASSED system/test_snmp.py::test_ft_snmp_entity_mib_all 
system/test_snmp.py::test_ft_snmp_dot1q_dot1db_mib 
[gw5] PASSED system/test_snmp.py::test_ft_snmp_dot1q_dot1db_mib 
system/test_snmp.py::test_ft_snmp_root_node_walk 
[gw5] PASSED system/test_snmp.py::test_ft_snmp_root_node_walk 
system/test_snmp.py::test_ft_snmp_ipAddressRowStatus_ipv6 
[gw5] PASSED system/test_snmp.py::test_ft_snmp_ipAddressRowStatus_ipv6 
system/test_snmp.py::test_ft_snmp_ipAddressStorageType_ipv6 
[gw5] PASSED system/test_snmp.py::test_ft_snmp_ipAddressStorageType_ipv6 
system/test_snmp.py::test_ft_snmp_ipv6_If_Forward_default_HopLimit 
[gw5] PASSED system/test_snmp.py::test_ft_snmp_ipv6_If_Forward_default_HopLimit 
system/test_snmp.py::test_ft_snmp_ipv6scope_index_table 
[gw5] PASSED system/test_snmp.py::test_ft_snmp_ipv6scope_index_table 
system/test_snmp.py::test_ft_snmp_ip_forward_table 
[gw5] PASSED system/test_snmp.py::test_ft_snmp_ip_forward_table 
system/test_snmp.py::test_ft_snmp_ifx_table 
[gw5] PASSED system/test_snmp.py::test_ft_snmp_ifx_table 
system/test_snmp.py::test_ft_snmp_ip_System_Stats_Table 
[gw5] PASSED system/test_snmp.py::test_ft_snmp_ip_System_Stats_Table 
system/test_snmp.py::test_ft_snmp_ip_IfStats_Table 
[gw5] PASSED system/test_snmp.py::test_ft_snmp_ip_IfStats_Table 
system/test_snmp.py::test_ft_snmp_ip_Address_Table 
[gw5] PASSED system/test_snmp.py::test_ft_snmp_ip_Address_Table 
system/test_snmp.py::test_ft_snmp_ip_NetToPhysical_Table 
[gw5] PASSED system/test_snmp.py::test_ft_snmp_ip_NetToPhysical_Table 
system/test_snmp.py::test_ft_snmp_icmp_Msgs 
[gw5] PASSED system/test_snmp.py::test_ft_snmp_icmp_Msgs 
system/test_snmp.py::test_ft_snmp_tcp_mib 
[gw4] PASSED batch/test_spytest_infra_1.py::test_spytest_infra_last 
system/test_ntp.py::test_ft_ntp_disable_enable_with_message_log 
[gw5] PASSED system/test_snmp.py::test_ft_snmp_tcp_mib 
system/test_snmp.py::test_ft_snmp_udp_mib 
[gw5] PASSED system/test_snmp.py::test_ft_snmp_udp_mib 
system/test_snmp.py::test_ft_snmp_snmpv2_mib 
[gw5] PASSED system/test_snmp.py::test_ft_snmp_snmpv2_mib 
system/test_snmp.py::test_ft_snmp_host_resource_mib 
[gw5] PASSED system/test_snmp.py::test_ft_snmp_host_resource_mib 
system/test_snmp.py::test_ft_snmp_framework_mib 
[gw5] PASSED system/test_snmp.py::test_ft_snmp_framework_mib 
system/test_snmp.py::test_ft_snmp_mpd_mib 
[gw5] PASSED system/test_snmp.py::test_ft_snmp_mpd_mib 
system/test_snmp.py::test_ft_snmp_target_mib 
[gw5] PASSED system/test_snmp.py::test_ft_snmp_target_mib 
system/test_snmp.py::test_ft_snmp_notification_mib 
[gw5] PASSED system/test_snmp.py::test_ft_snmp_notification_mib 
system/test_snmp.py::test_ft_snmp_user_based_sm_mib 
[gw5] PASSED system/test_snmp.py::test_ft_snmp_user_based_sm_mib 
system/test_snmp.py::test_ft_snmp_view_based_acm_mib 
[gw5] PASSED system/test_snmp.py::test_ft_snmp_view_based_acm_mib 
system/test_snmp.py::test_ft_snmp_ent_physical_table 
[gw5] PASSED system/test_snmp.py::test_ft_snmp_ent_physical_table 
system/test_snmp.py::test_ft_snmp_dot3_stats_table 
[gw5] PASSED system/test_snmp.py::test_ft_snmp_dot3_stats_table 
system/test_snmp.py::test_ft_net_snmp_agent_mib 
[gw5] PASSED system/test_snmp.py::test_ft_net_snmp_agent_mib 
system/test_snmp.py::test_ft_net_snmp_vacm_mib 
[gw5] PASSED system/test_snmp.py::test_ft_net_snmp_vacm_mib 
system/test_snmp.py::test_ft_snmp_ucd_diskio_mib 
[gw5] PASSED system/test_snmp.py::test_ft_snmp_ucd_diskio_mib 
system/test_snmp.py::test_ft_snmp_ucd_la_table 
[gw5] PASSED system/test_snmp.py::test_ft_snmp_ucd_la_table 
system/test_snmp.py::test_ft_snmp_ucd_system_stats 
[gw5] PASSED system/test_snmp.py::test_ft_snmp_ucd_system_stats 
system/test_snmp.py::test_ft_snmp_dot1q_tp_fdb_port 
[gw5] XFAIL system/test_snmp.py::test_ft_snmp_dot1q_tp_fdb_port 
system/test_snmp.py::test_ft_snmp_dot1q_tp_fdb_address 
[gw5] PASSED system/test_snmp.py::test_ft_snmp_dot1q_tp_fdb_address 
system/test_snmp.py::test_ft_snmp_coldstart_trap 
[gw5] XFAIL system/test_snmp.py::test_ft_snmp_coldstart_trap 
system/test_snmp.py::test_ft_snmp_docker_restart 
[gw5] XFAIL system/test_snmp.py::test_ft_snmp_docker_restart 
batch/test_spytest_infra_1.py::test_spytest_infra_last 
[gw3] XFAIL system/test_ssh.py::test_ft_ssh_add_user_verify 
system/test_ssh.py::test_ft_verify_logs_at_the_time_of_ssh_login_success 
[gw3] PASSED system/test_ssh.py::test_ft_verify_logs_at_the_time_of_ssh_login_success 
batch/test_spytest_infra_1.py::test_spytest_infra_last 
[gw3] PASSED batch/test_spytest_infra_1.py::test_spytest_infra_last 
[gw5] PASSED batch/test_spytest_infra_1.py::test_spytest_infra_last 
security/test_tacacs.py::test_ft_tacacs_ssh_login_with_tacacs_operations 
[gw4] FAILED system/test_ntp.py::test_ft_ntp_disable_enable_with_message_log 
system/test_ntp.py::test_ntp_exists_config 
[gw4] PASSED system/test_ntp.py::test_ntp_exists_config 
batch/test_spytest_infra_1.py::test_spytest_infra_last 
[gw4] PASSED batch/test_spytest_infra_1.py::test_spytest_infra_last 
[gw5] XFAIL security/test_tacacs.py::test_ft_tacacs_ssh_login_with_tacacs_operations 
batch/test_spytest_infra_1.py::test_spytest_infra_last 
[gw5] PASSED batch/test_spytest_infra_1.py::test_spytest_infra_last 

=================================== FAILURES ===================================
________________ test_ft_vlan_save_config_warm_and_fast_reboot _________________
[gw3] linux -- Python 3.8.10 /usr/bin/python3.8

    @pytest.mark.vlan_reboot_config_fast_reboot
    @pytest.mark.inventory(feature='warmboot', release='Buzznik')
    @pytest.mark.inventory(testcases=['FtOpSoSysFRFn005'])
    @pytest.mark.inventory(testcases=['ft_max_vlan_save_reload'])
    @pytest.mark.inventory(testcases=['ft_reboot_fdb_fast_reboot'])
    def test_ft_vlan_save_config_warm_and_fast_reboot():
        '''
        Author: Sai Durga <pchvsai.durga@broadcom.com>
        This script covers the below scenarios
    
        ft_max_vlan_save_reload	    Verify the save and reload functionality with max vlan configuration.
        ft_max_vlan_fast_reload	    Verify the max vlan configuration is retained after fast-reboot.
        FtOpSoSwVlFn026	            Verify that VLAN is present and traffic is not disturbed during and after warm reboot
        FtOpSoSysFRFn005            Verify the Fast-Reboot must disrupt control plane not more than 90 seconds (from sonic test suite -configuration tests)
        ft_reboot_fdb_fast_reboot   Verify that the FDB entry is retained after fast reboot.
    
        '''
        status = True
        msg_id = "max_vlan_config_retain_after_save_fast_warm_reboot"
        vlan_module_config(config='yes')
        st.log("Device name is : {}".format(sc_data.dut_platform))
    
        st.log("Saving the MAX VLAN config on the device")
        reboot.config_save(vars.D1)
    
        st.log("Performing reboot and checking the VLAN configuration")
        st.reboot(vars.D1)
        st.log("Checking VLAN config after reboot")
        max_vlan_verify()
    
        st.log(
            "Sending traffic with 100 MAC,Checking FDB table updated with 100 MAC addresses and performing reboot and checking the VLAN configuration")
        tg.tg_traffic_control(action="reset", port_handle=tg_handler["tg_ph_list"])
        tg_1 = tg.tg_traffic_config(port_handle=tg_handler["tg_ph_1"], mode='create', length_mode='fixed',
                             frame_size=72,
                             mac_src='00:01:00:00:00:01', mac_src_step='00:00:00:00:00:01',
                             mac_src_mode='increment', mac_src_count=sc_data.mac_count,
                             mac_dst='00:02:00:00:00:02',
                             rate_pps=2000, l2_encap='ethernet_ii_vlan', vlan="enable",
                             vlan_id=sc_data.vlan,
                             transmit_mode='continuous')
        tg_info['tg1_stream_id'] = tg_1['stream_id']
        tg.tg_traffic_control(action='run', stream_handle=tg_info['tg1_stream_id'])
        st.wait(2)
        tg.tg_traffic_control(action='stop', stream_handle=tg_info['tg1_stream_id'])
    
        if not st.poll_wait(mac_verify, 300):
            st.error("mac_address_verification_fail")
    
        st.log("Performing fast-reboot and checking the VLAN configuration")
        st.reboot(vars.D1, 'fast')
        st.log("Checking VLAN config after fast-reboot")
        max_vlan_verify()
        st.log("Sending traffic after fast reboot and checking the FDB table")
        tg.tg_traffic_control(action='run', stream_handle=tg_info['tg1_stream_id'])
        st.wait(2)
        tg.tg_traffic_control(action='stop', stream_handle=tg_info['tg1_stream_id'])
    
        if not st.poll_wait(mac_verify, 300):
            st.error("mac_address_verification_fail")
    
        st.log("Performing warm reboot and checking the traffic")
        ifapi.clear_interface_counters(vars.D1)
        st.wait(2)
        ifapi.show_interface_counters_all(vars.D1)
        st.wait(2)
        tg.tg_traffic_control(action='run', stream_handle=tg_info['tg1_stream_id'])
        st.wait(2)
>       reboot.warm_reboot(vars.D1)

switching/test_vlan.py:906: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../apis/system/reboot.py:83: in warm_reboot
    if (st.getenv("SPYTEST_UNSUPPORT_TD4_WARM_REBOOT") and basic.is_td4_platform(dut)) or basic.is_warm_boot_support(dut, is_support=False):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dut = 'V1', is_support = False

    def is_warm_boot_support(dut, is_support=False):
        platform = get_hwsku(dut)
        features_support_data = st.get_datastore(dut, "features", "default")
        key = "WARMBOOT_SUPPORTED" if is_support else "WARMBOOT_UNSUPPORTED"
>       return bool(platform.lower() in features_support_data[key])
E       TypeError: 'NoneType' object is not subscriptable

../apis/system/basic.py:1389: TypeError
_________________ test_ft_ntp_disable_enable_with_message_log __________________
[gw4] linux -- Python 3.8.10 /usr/bin/python3.8

    @pytest.mark.ntp_disable_enable_message_log
    @pytest.mark.regression
    @pytest.mark.community
    @pytest.mark.community_pass
    @pytest.mark.inventory(feature='Regression', release='Arlo+')
    @pytest.mark.inventory(testcases=['ft_ntp_disable_ntp_enable_ntp'])
